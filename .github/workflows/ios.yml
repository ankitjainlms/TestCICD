- name: üîë Generate JWT Token (Python)
  id: jwt
  env:
    APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
    APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
    APPSTORE_PRIVATE_KEY: ${{ secrets.APPSTORE_PRIVATE_KEY }}
  run: |
    echo "Using APPSTORE_KEY_ID: $APPSTORE_KEY_ID"

    # Ensure the private key is correctly base64 decoded
    echo "$APPSTORE_PRIVATE_KEY" | base64 --decode > AuthKey.p8 || { echo "‚ùå Failed to decode APPSTORE_PRIVATE_KEY"; exit 1; }

    # Run Python script properly inside a HEREDOC
    python3 - <<EOF
import jwt
import time
import os

key_path = "AuthKey.p8"
key_id = os.getenv("APPSTORE_KEY_ID", "").strip()
issuer_id = os.getenv("APPSTORE_ISSUER_ID", "").strip()

if not key_id:
    raise ValueError("‚ùå ERROR: APPSTORE_KEY_ID is missing or empty!")
if not issuer_id:
    raise ValueError("‚ùå ERROR: APPSTORE_ISSUER_ID is missing or empty!")

print("‚úÖ Reading private key in binary mode to prevent UnicodeDecodeError")
with open(key_path, "rb") as key_file:  # Read in binary mode
    private_key = key_file.read()

current_time = int(time.time())
payload = {
    "iss": issuer_id,
    "iat": current_time,
    "exp": current_time + 1200,
    "aud": "appstoreconnect-v1"
}

headers = {"alg": "ES256", "kid": key_id}
token = jwt.encode(payload, private_key, algorithm="ES256", headers=headers)

print(f"‚úÖ JWT Token Generated: {token[:20]}... (truncated)")

with open(os.environ["GITHUB_ENV"], "a") as env_file:
    env_file.write(f"JWT_TOKEN={token}\n")
EOF
